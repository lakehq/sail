{
  "tests": [
    {
      "input": {
        "query": "SELECT a, session_window.start, session_window.end, count(*) as cnt FROM VALUES ('A1', '2021-01-01 00:00:00'), ('A1', '2021-01-01 00:04:30'), ('A1', '2021-01-01 00:10:00'), ('A2', '2021-01-01 00:01:00') AS tab(a, b) GROUP by a, session_window(b, '5 minutes') ORDER BY a, start;",
        "result": [
          "A1\t2021-01-01 00:00:00\t2021-01-01 00:09:30\t2",
          "A1\t2021-01-01 00:10:00\t2021-01-01 00:15:00\t1",
          "A2\t2021-01-01 00:01:00\t2021-01-01 00:06:00\t1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "a",
              "nullable": false,
              "type": "string",
              "metadata": {}
            },
            {
              "name": "start",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "end",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "cnt",
              "nullable": false,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: cannot resolve attribute: ObjectName([Identifier(\"session_window\"), Identifier(\"start\")])"
      }
    },
    {
      "input": {
        "query": "SELECT a, session_window.start, session_window.end, count(*) as cnt FROM VALUES ('A1', '2021-01-01 00:00:00'), ('A1', '2021-01-01 00:04:30'), ('A1', '2021-01-01 00:10:00'), ('A2', '2021-01-01 00:01:00'), ('A2', '2021-01-01 00:04:30') AS tab(a, b) GROUP by a, session_window(b, CASE WHEN a = 'A1' THEN '5 minutes' WHEN a = 'A2' THEN '1 minute' ELSE '10 minutes' END) ORDER BY a, start;",
        "result": [
          "A1\t2021-01-01 00:00:00\t2021-01-01 00:09:30\t2",
          "A1\t2021-01-01 00:10:00\t2021-01-01 00:15:00\t1",
          "A2\t2021-01-01 00:01:00\t2021-01-01 00:02:00\t1",
          "A2\t2021-01-01 00:04:30\t2021-01-01 00:05:30\t1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "a",
              "nullable": false,
              "type": "string",
              "metadata": {}
            },
            {
              "name": "start",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "end",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "cnt",
              "nullable": false,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: cannot resolve attribute: ObjectName([Identifier(\"session_window\"), Identifier(\"start\")])"
      }
    },
    {
      "input": {
        "query": "SELECT a, window.start as start, window.end as end, window_time(window), cnt FROM (SELECT a, window, count(*) as cnt FROM VALUES ('A1', '2021-01-01 00:00:00'), ('A1', '2021-01-01 00:04:30'), ('A1', '2021-01-01 00:06:00'), ('A2', '2021-01-01 00:01:00') AS tab(a, b) GROUP by a, window(b, '5 minutes') ORDER BY a, window.start);",
        "result": [
          "A1\t2021-01-01 00:00:00\t2021-01-01 00:05:00\t2021-01-01 00:04:59.999999\t2",
          "A1\t2021-01-01 00:05:00\t2021-01-01 00:10:00\t2021-01-01 00:09:59.999999\t1",
          "A2\t2021-01-01 00:00:00\t2021-01-01 00:05:00\t2021-01-01 00:04:59.999999\t1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "a",
              "nullable": false,
              "type": "string",
              "metadata": {}
            },
            {
              "name": "start",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "end",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "window_time(window)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "cnt",
              "nullable": false,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: cannot resolve attribute: ObjectName([Identifier(\"window\")])"
      }
    },
    {
      "input": {
        "query": "SELECT a, window.start, window.end, count(*) as cnt FROM VALUES ('A1', '2021-01-01 00:00:00'), ('A1', '2021-01-01 00:04:30'), ('A1', '2021-01-01 00:06:00'), ('A2', '2021-01-01 00:01:00') AS tab(a, b) GROUP by a, window(b, '10 minutes', '5 minutes') ORDER BY a, start;",
        "result": [
          "A1\t2020-12-31 23:55:00\t2021-01-01 00:05:00\t2",
          "A1\t2021-01-01 00:00:00\t2021-01-01 00:10:00\t3",
          "A1\t2021-01-01 00:05:00\t2021-01-01 00:15:00\t1",
          "A2\t2020-12-31 23:55:00\t2021-01-01 00:05:00\t1",
          "A2\t2021-01-01 00:00:00\t2021-01-01 00:10:00\t1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "a",
              "nullable": false,
              "type": "string",
              "metadata": {}
            },
            {
              "name": "start",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "end",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "cnt",
              "nullable": false,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: cannot resolve attribute: ObjectName([Identifier(\"window\"), Identifier(\"start\")])"
      }
    },
    {
      "input": {
        "query": "SELECT a, window.start, window.end, count(*) as cnt FROM VALUES ('A1', '2021-01-01 00:00:00'), ('A1', '2021-01-01 00:04:30'), ('A1', '2021-01-01 00:06:00'), ('A2', '2021-01-01 00:01:00') AS tab(a, b) GROUP by a, window(b, '5 minutes') ORDER BY a, start;",
        "result": [
          "A1\t2021-01-01 00:00:00\t2021-01-01 00:05:00\t2",
          "A1\t2021-01-01 00:05:00\t2021-01-01 00:10:00\t1",
          "A2\t2021-01-01 00:00:00\t2021-01-01 00:05:00\t1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "a",
              "nullable": false,
              "type": "string",
              "metadata": {}
            },
            {
              "name": "start",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "end",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            },
            {
              "name": "cnt",
              "nullable": false,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: cannot resolve attribute: ObjectName([Identifier(\"window\"), Identifier(\"start\")])"
      }
    },
    {
      "input": {
        "query": "SELECT add_months('2016-08-31', 1);",
        "result": [
          "2016-09-30"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "add_months(2016-08-31, 1)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT convert_timezone('Europe/Brussels', 'America/Los_Angeles', timestamp_ntz'2021-12-06 00:00:00');",
        "result": [
          "2021-12-05 15:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "convert_timezone(Europe/Brussels, America/Los_Angeles, TIMESTAMP_NTZ '2021-12-06 00:00:00')",
              "nullable": false,
              "type": "timestamp_ntz",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: convert_timezone"
      }
    },
    {
      "input": {
        "query": "SELECT convert_timezone('Europe/Brussels', timestamp_ntz'2021-12-05 15:00:00');",
        "result": [
          "2021-12-06 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "convert_timezone(current_timezone(), Europe/Brussels, TIMESTAMP_NTZ '2021-12-05 15:00:00')",
              "nullable": false,
              "type": "timestamp_ntz",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: convert_timezone"
      }
    },
    {
      "input": {
        "query": "SELECT curdate();",
        "result": [
          "2022-09-06"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "current_date()",
              "nullable": false,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT current_date();",
        "result": [
          "2020-04-25"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "current_date()",
              "nullable": false,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT current_date;",
        "result": [
          "2020-04-25"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "current_date()",
              "nullable": false,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT current_timestamp();",
        "result": [
          "2020-04-25 15:49:11.914"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "current_timestamp()",
              "nullable": false,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT current_timestamp;",
        "result": [
          "2020-04-25 15:49:11.914"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "current_timestamp()",
              "nullable": false,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT current_timezone();",
        "result": [
          "Asia/Shanghai"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "current_timezone()",
              "nullable": false,
              "type": "string",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_add('2016-07-30', 1);",
        "result": [
          "2016-07-31"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_add(2016-07-30, 1)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_diff('2009-07-30', '2009-07-31');",
        "result": [
          "-1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_diff(2009-07-30, 2009-07-31)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_diff('2009-07-31', '2009-07-30');",
        "result": [
          "1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_diff(2009-07-31, 2009-07-30)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_format('2016-04-08', 'y');",
        "result": [
          "2016"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_format(2016-04-08, y)",
              "nullable": true,
              "type": "string",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_from_unix_date(1);",
        "result": [
          "1970-01-02"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_from_unix_date(1)",
              "nullable": false,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: date_from_unix_date"
      }
    },
    {
      "input": {
        "query": "SELECT date_part('MINUTE', INTERVAL '123 23:55:59.002001' DAY TO SECOND);",
        "result": [
          "55"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_part(MINUTE, INTERVAL '123 23:55:59.002001' DAY TO SECOND)",
              "nullable": false,
              "type": "byte",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(MonthDayNano)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(MonthDayNano))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT date_part('MONTH', INTERVAL '2021-11' YEAR TO MONTH);",
        "result": [
          "11"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_part(MONTH, INTERVAL '2021-11' YEAR TO MONTH)",
              "nullable": false,
              "type": "byte",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(YearMonth)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(YearMonth))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT date_part('SECONDS', timestamp'2019-10-01 00:00:01.000001');",
        "result": [
          "1.000001"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_part(SECONDS, TIMESTAMP '2019-10-01 00:00:01.000001')",
              "nullable": false,
              "type": "decimal(8, 6)",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Execution error: Date part 'SECONDS' not supported"
      }
    },
    {
      "input": {
        "query": "SELECT date_part('YEAR', TIMESTAMP '2019-08-12 01:00:00.123456');",
        "result": [
          "2019"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_part(YEAR, TIMESTAMP '2019-08-12 01:00:00.123456')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_part('days', interval 5 days 3 hours 7 minutes);",
        "result": [
          "5"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_part(days, INTERVAL '5 03:07' DAY TO MINUTE)",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(DayTime)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(DayTime))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT date_part('doy', DATE'2019-08-12');",
        "result": [
          "224"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_part(doy, DATE '2019-08-12')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_part('seconds', interval 5 hours 30 seconds 1 milliseconds 1 microseconds);",
        "result": [
          "30.001001"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_part(seconds, INTERVAL '05:00:30.001001' HOUR TO SECOND)",
              "nullable": false,
              "type": "decimal(8, 6)",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(MonthDayNano)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(MonthDayNano))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT date_part('week', timestamp'2019-08-12 01:00:00.123456');",
        "result": [
          "33"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_part(week, TIMESTAMP '2019-08-12 01:00:00.123456')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_sub('2016-07-30', 1);",
        "result": [
          "2016-07-29"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_sub(2016-07-30, 1)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_trunc('DD', '2015-03-05T09:32:05.359');",
        "result": [
          "2015-03-05 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_trunc(DD, 2015-03-05T09:32:05.359)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Execution error: Unsupported date_trunc granularity: dd"
      }
    },
    {
      "input": {
        "query": "SELECT date_trunc('HOUR', '2015-03-05T09:32:05.359');",
        "result": [
          "2015-03-05 09:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_trunc(HOUR, 2015-03-05T09:32:05.359)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_trunc('MILLISECOND', '2015-03-05T09:32:05.123456');",
        "result": [
          "2015-03-05 09:32:05.123"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_trunc(MILLISECOND, 2015-03-05T09:32:05.123456)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT date_trunc('MM', '2015-03-05T09:32:05.359');",
        "result": [
          "2015-03-01 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_trunc(MM, 2015-03-05T09:32:05.359)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Execution error: Unsupported date_trunc granularity: mm"
      }
    },
    {
      "input": {
        "query": "SELECT date_trunc('YEAR', '2015-03-05T09:32:05.359');",
        "result": [
          "2015-01-01 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_trunc(YEAR, 2015-03-05T09:32:05.359)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT dateadd('2016-07-30', 1);",
        "result": [
          "2016-07-31"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "date_add(2016-07-30, 1)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT datediff('2009-07-30', '2009-07-31');",
        "result": [
          "-1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datediff(2009-07-30, 2009-07-31)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT datediff('2009-07-31', '2009-07-30');",
        "result": [
          "1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datediff(2009-07-31, 2009-07-30)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT datepart('MINUTE', INTERVAL '123 23:55:59.002001' DAY TO SECOND);",
        "result": [
          "55"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datepart(MINUTE FROM INTERVAL '123 23:55:59.002001' DAY TO SECOND)",
              "nullable": false,
              "type": "byte",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(MonthDayNano)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(MonthDayNano))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT datepart('MONTH', INTERVAL '2021-11' YEAR TO MONTH);",
        "result": [
          "11"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datepart(MONTH FROM INTERVAL '2021-11' YEAR TO MONTH)",
              "nullable": false,
              "type": "byte",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(YearMonth)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(YearMonth))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT datepart('SECONDS', timestamp'2019-10-01 00:00:01.000001');",
        "result": [
          "1.000001"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datepart(SECONDS FROM TIMESTAMP '2019-10-01 00:00:01.000001')",
              "nullable": false,
              "type": "decimal(8, 6)",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Execution error: Date part 'SECONDS' not supported"
      }
    },
    {
      "input": {
        "query": "SELECT datepart('YEAR', TIMESTAMP '2019-08-12 01:00:00.123456');",
        "result": [
          "2019"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datepart(YEAR FROM TIMESTAMP '2019-08-12 01:00:00.123456')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT datepart('days', interval 5 days 3 hours 7 minutes);",
        "result": [
          "5"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datepart(days FROM INTERVAL '5 03:07' DAY TO MINUTE)",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(DayTime)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(DayTime))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT datepart('doy', DATE'2019-08-12');",
        "result": [
          "224"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datepart(doy FROM DATE '2019-08-12')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT datepart('seconds', interval 5 hours 30 seconds 1 milliseconds 1 microseconds);",
        "result": [
          "30.001001"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datepart(seconds FROM INTERVAL '05:00:30.001001' HOUR TO SECOND)",
              "nullable": false,
              "type": "decimal(8, 6)",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(MonthDayNano)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(MonthDayNano))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT datepart('week', timestamp'2019-08-12 01:00:00.123456');",
        "result": [
          "33"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "datepart(week FROM TIMESTAMP '2019-08-12 01:00:00.123456')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT day('2009-07-30');",
        "result": [
          "30"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "day(2009-07-30)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT dayofmonth('2009-07-30');",
        "result": [
          "30"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "dayofmonth(2009-07-30)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: dayofmonth"
      }
    },
    {
      "input": {
        "query": "SELECT dayofweek('2009-07-30');",
        "result": [
          "5"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "dayofweek(2009-07-30)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: dayofweek"
      }
    },
    {
      "input": {
        "query": "SELECT dayofyear('2016-04-09');",
        "result": [
          "100"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "dayofyear(2016-04-09)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: dayofyear"
      }
    },
    {
      "input": {
        "query": "SELECT extract(MINUTE FROM INTERVAL '123 23:55:59.002001' DAY TO SECOND);",
        "result": [
          "55"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "extract(MINUTE FROM INTERVAL '123 23:55:59.002001' DAY TO SECOND)",
              "nullable": false,
              "type": "byte",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(MonthDayNano)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(MonthDayNano))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT extract(MONTH FROM INTERVAL '2021-11' YEAR TO MONTH);",
        "result": [
          "11"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "extract(MONTH FROM INTERVAL '2021-11' YEAR TO MONTH)",
              "nullable": false,
              "type": "byte",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(YearMonth)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(YearMonth))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT extract(SECONDS FROM timestamp'2019-10-01 00:00:01.000001');",
        "result": [
          "1.000001"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "extract(SECONDS FROM TIMESTAMP '2019-10-01 00:00:01.000001')",
              "nullable": false,
              "type": "decimal(8, 6)",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Execution error: Date part 'SECONDS' not supported"
      }
    },
    {
      "input": {
        "query": "SELECT extract(YEAR FROM TIMESTAMP '2019-08-12 01:00:00.123456');",
        "result": [
          "2019"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "extract(YEAR FROM TIMESTAMP '2019-08-12 01:00:00.123456')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT extract(days FROM interval 5 days 3 hours 7 minutes);",
        "result": [
          "5"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "extract(days FROM INTERVAL '5 03:07' DAY TO MINUTE)",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(DayTime)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(DayTime))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT extract(doy FROM DATE'2019-08-12');",
        "result": [
          "224"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "extract(doy FROM DATE '2019-08-12')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT extract(seconds FROM interval 5 hours 30 seconds 1 milliseconds 1 microseconds);",
        "result": [
          "30.001001"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "extract(seconds FROM INTERVAL '05:00:30.001001' HOUR TO SECOND)",
              "nullable": false,
              "type": "decimal(8, 6)",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Error during planning: Error during planning: Coercion from [Utf8, Interval(MonthDayNano)] to the signature OneOf([Exact([Utf8, Timestamp(Nanosecond, None)]), Exact([Utf8View, Timestamp(Nanosecond, None)]), Exact([Utf8, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Nanosecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Millisecond, None)]), Exact([Utf8View, Timestamp(Millisecond, None)]), Exact([Utf8, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Millisecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Microsecond, None)]), Exact([Utf8View, Timestamp(Microsecond, None)]), Exact([Utf8, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Microsecond, Some(\"+TZ\"))]), Exact([Utf8, Timestamp(Second, None)]), Exact([Utf8View, Timestamp(Second, None)]), Exact([Utf8, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8View, Timestamp(Second, Some(\"+TZ\"))]), Exact([Utf8, Date64]), Exact([Utf8View, Date64]), Exact([Utf8, Date32]), Exact([Utf8View, Date32]), Exact([Utf8, Time32(Second)]), Exact([Utf8View, Time32(Second)]), Exact([Utf8, Time32(Millisecond)]), Exact([Utf8View, Time32(Millisecond)]), Exact([Utf8, Time64(Microsecond)]), Exact([Utf8View, Time64(Microsecond)]), Exact([Utf8, Time64(Nanosecond)]), Exact([Utf8View, Time64(Nanosecond)])]) failed. No function matches the given name and argument types 'date_part(Utf8, Interval(MonthDayNano))'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(Utf8, Timestamp(Nanosecond, None))\n\tdate_part(Utf8View, Timestamp(Nanosecond, None))\n\tdate_part(Utf8, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Nanosecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Millisecond, None))\n\tdate_part(Utf8View, Timestamp(Millisecond, None))\n\tdate_part(Utf8, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Millisecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Microsecond, None))\n\tdate_part(Utf8View, Timestamp(Microsecond, None))\n\tdate_part(Utf8, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Microsecond, Some(\"+TZ\")))\n\tdate_part(Utf8, Timestamp(Second, None))\n\tdate_part(Utf8View, Timestamp(Second, None))\n\tdate_part(Utf8, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8View, Timestamp(Second, Some(\"+TZ\")))\n\tdate_part(Utf8, Date64)\n\tdate_part(Utf8View, Date64)\n\tdate_part(Utf8, Date32)\n\tdate_part(Utf8View, Date32)\n\tdate_part(Utf8, Time32(Second))\n\tdate_part(Utf8View, Time32(Second))\n\tdate_part(Utf8, Time32(Millisecond))\n\tdate_part(Utf8View, Time32(Millisecond))\n\tdate_part(Utf8, Time64(Microsecond))\n\tdate_part(Utf8View, Time64(Microsecond))\n\tdate_part(Utf8, Time64(Nanosecond))\n\tdate_part(Utf8View, Time64(Nanosecond))"
      }
    },
    {
      "input": {
        "query": "SELECT extract(week FROM timestamp'2019-08-12 01:00:00.123456');",
        "result": [
          "33"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "extract(week FROM TIMESTAMP '2019-08-12 01:00:00.123456')",
              "nullable": false,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT from_unixtime(0);",
        "result": [
          "1969-12-31 16:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "from_unixtime(0, yyyy-MM-dd HH:mm:ss)",
              "nullable": true,
              "type": "string",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT from_unixtime(0, 'yyyy-MM-dd HH:mm:ss');",
        "result": [
          "1969-12-31 16:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "from_unixtime(0, yyyy-MM-dd HH:mm:ss)",
              "nullable": true,
              "type": "string",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "invalid argument: from_unixtime with format is not supported yet"
      }
    },
    {
      "input": {
        "query": "SELECT from_utc_timestamp('2016-08-31', 'Asia/Seoul');",
        "result": [
          "2016-08-31 09:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "from_utc_timestamp(2016-08-31, Asia/Seoul)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: from_utc_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT hour('2009-07-30 12:58:59');",
        "result": [
          "12"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "hour(2009-07-30 12:58:59)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: hour"
      }
    },
    {
      "input": {
        "query": "SELECT last_day('2009-01-12');",
        "result": [
          "2009-01-31"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "last_day(2009-01-12)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: last_day"
      }
    },
    {
      "input": {
        "query": "SELECT localtimestamp();",
        "result": [
          "2020-04-25 15:49:11.914"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "localtimestamp()",
              "nullable": false,
              "type": "timestamp_ntz",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: localtimestamp"
      }
    },
    {
      "input": {
        "query": "SELECT make_date(2013, 7, 15);",
        "result": [
          "2013-07-15"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_date(2013, 7, 15)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT make_date(2019, 7, NULL);",
        "result": [
          "NULL"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_date(2019, 7, NULL)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT make_dt_interval(1, 12, 30, 01.001001);",
        "result": [
          "1 12:30:01.001001000"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_dt_interval(1, 12, 30, 1.001001)",
              "nullable": false,
              "type": "interval day to second",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_dt_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_dt_interval(100, null, 3);",
        "result": [
          "NULL"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_dt_interval(100, NULL, 3, 0.000000)",
              "nullable": true,
              "type": "interval day to second",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_dt_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_dt_interval(2);",
        "result": [
          "2 00:00:00.000000000"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_dt_interval(2, 0, 0, 0.000000)",
              "nullable": false,
              "type": "interval day to second",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_dt_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_interval(0, 1, 0, 1, 0, 0, 100.000001);",
        "result": [
          "1 months 1 days 1 minutes 40.000001 seconds"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_interval(0, 1, 0, 1, 0, 0, 100.000001)",
              "nullable": true,
              "type": "interval",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_interval(100, 11, 1, 1, 12, 30, 01.001001);",
        "result": [
          "100 years 11 months 8 days 12 hours 30 minutes 1.001001 seconds"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_interval(100, 11, 1, 1, 12, 30, 1.001001)",
              "nullable": true,
              "type": "interval",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_interval(100, null, 3);",
        "result": [
          "NULL"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_interval(100, NULL, 3, 0, 0, 0, 0.000000)",
              "nullable": true,
              "type": "interval",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp(2014, 12, 28, 6, 30, 45.887);",
        "result": [
          "2014-12-28 06:30:45.887"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp(2014, 12, 28, 6, 30, 45.887)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp(2014, 12, 28, 6, 30, 45.887, 'CET');",
        "result": [
          "2014-12-27 21:30:45.887"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp(2014, 12, 28, 6, 30, 45.887, CET)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp(2019, 6, 30, 23, 59, 1);",
        "result": [
          "2019-06-30 23:59:01"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp(2019, 6, 30, 23, 59, 1)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp(2019, 6, 30, 23, 59, 60);",
        "result": [
          "2019-07-01 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp(2019, 6, 30, 23, 59, 60)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp(null, 7, 22, 15, 30, 0);",
        "result": [
          "NULL"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp(NULL, 7, 22, 15, 30, 0)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp_ltz(2014, 12, 28, 6, 30, 45.887);",
        "result": [
          "2014-12-28 06:30:45.887"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp_ltz(2014, 12, 28, 6, 30, 45.887)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp_ltz"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp_ltz(2014, 12, 28, 6, 30, 45.887, 'CET');",
        "result": [
          "2014-12-27 21:30:45.887"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp_ltz(2014, 12, 28, 6, 30, 45.887, CET)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp_ltz"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp_ltz(2019, 6, 30, 23, 59, 60);",
        "result": [
          "2019-07-01 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp_ltz(2019, 6, 30, 23, 59, 60)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp_ltz"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp_ltz(null, 7, 22, 15, 30, 0);",
        "result": [
          "NULL"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp_ltz(NULL, 7, 22, 15, 30, 0)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp_ltz"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp_ntz(2014, 12, 28, 6, 30, 45.887);",
        "result": [
          "2014-12-28 06:30:45.887"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp_ntz(2014, 12, 28, 6, 30, 45.887)",
              "nullable": true,
              "type": "timestamp_ntz",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp_ntz"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp_ntz(2019, 6, 30, 23, 59, 60);",
        "result": [
          "2019-07-01 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp_ntz(2019, 6, 30, 23, 59, 60)",
              "nullable": true,
              "type": "timestamp_ntz",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp_ntz"
      }
    },
    {
      "input": {
        "query": "SELECT make_timestamp_ntz(null, 7, 22, 15, 30, 0);",
        "result": [
          "NULL"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_timestamp_ntz(NULL, 7, 22, 15, 30, 0)",
              "nullable": true,
              "type": "timestamp_ntz",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_timestamp_ntz"
      }
    },
    {
      "input": {
        "query": "SELECT make_ym_interval(-1, 1);",
        "result": [
          "-0-11"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_ym_interval(-1, 1)",
              "nullable": false,
              "type": "interval year to month",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_ym_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_ym_interval(1, 0);",
        "result": [
          "1-0"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_ym_interval(1, 0)",
              "nullable": false,
              "type": "interval year to month",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_ym_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_ym_interval(1, 2);",
        "result": [
          "1-2"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_ym_interval(1, 2)",
              "nullable": false,
              "type": "interval year to month",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_ym_interval"
      }
    },
    {
      "input": {
        "query": "SELECT make_ym_interval(2);",
        "result": [
          "2-0"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "make_ym_interval(2, 0)",
              "nullable": false,
              "type": "interval year to month",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: make_ym_interval"
      }
    },
    {
      "input": {
        "query": "SELECT minute('2009-07-30 12:58:59');",
        "result": [
          "58"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "minute(2009-07-30 12:58:59)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: minute"
      }
    },
    {
      "input": {
        "query": "SELECT month('2016-07-30');",
        "result": [
          "7"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "month(2016-07-30)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT months_between('1997-02-28 10:30:00', '1996-10-30');",
        "result": [
          "3.94959677"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "months_between(1997-02-28 10:30:00, 1996-10-30, true)",
              "nullable": true,
              "type": "double",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: months_between"
      }
    },
    {
      "input": {
        "query": "SELECT months_between('1997-02-28 10:30:00', '1996-10-30', false);",
        "result": [
          "3.9495967741935485"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "months_between(1997-02-28 10:30:00, 1996-10-30, false)",
              "nullable": true,
              "type": "double",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: months_between"
      }
    },
    {
      "input": {
        "query": "SELECT next_day('2015-01-14', 'TU');",
        "result": [
          "2015-01-20"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "next_day(2015-01-14, TU)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: next_day"
      }
    },
    {
      "input": {
        "query": "SELECT now();",
        "result": [
          "2020-04-25 15:49:11.914"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "now()",
              "nullable": false,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT quarter('2016-08-31');",
        "result": [
          "3"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "quarter(2016-08-31)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: quarter"
      }
    },
    {
      "input": {
        "query": "SELECT second('2009-07-30 12:58:59');",
        "result": [
          "59"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "second(2009-07-30 12:58:59)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: second"
      }
    },
    {
      "input": {
        "query": "SELECT timestamp_micros(1230219000123123);",
        "result": [
          "2008-12-25 07:30:00.123123"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "timestamp_micros(1230219000123123)",
              "nullable": false,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: timestamp_micros"
      }
    },
    {
      "input": {
        "query": "SELECT timestamp_millis(1230219000123);",
        "result": [
          "2008-12-25 07:30:00.123"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "timestamp_millis(1230219000123)",
              "nullable": false,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: timestamp_millis"
      }
    },
    {
      "input": {
        "query": "SELECT timestamp_seconds(1230219000);",
        "result": [
          "2008-12-25 07:30:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "timestamp_seconds(1230219000)",
              "nullable": false,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: timestamp_seconds"
      }
    },
    {
      "input": {
        "query": "SELECT timestamp_seconds(1230219000.123);",
        "result": [
          "2008-12-25 07:30:00.123"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "timestamp_seconds(1230219000.123)",
              "nullable": false,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: timestamp_seconds"
      }
    },
    {
      "input": {
        "query": "SELECT to_date('2009-07-30 04:17:52');",
        "result": [
          "2009-07-30"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_date(2009-07-30 04:17:52)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT to_date('2016-12-31', 'yyyy-MM-dd');",
        "result": [
          "2016-12-31"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_date(2016-12-31, yyyy-MM-dd)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT to_timestamp('2016-12-31 00:12:00');",
        "result": [
          "2016-12-31 00:12:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_timestamp(2016-12-31 00:12:00)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT to_timestamp('2016-12-31', 'yyyy-MM-dd');",
        "result": [
          "2016-12-31 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_timestamp(2016-12-31, yyyy-MM-dd)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT to_timestamp_ltz('2016-12-31 00:12:00');",
        "result": [
          "2016-12-31 00:12:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_timestamp_ltz(2016-12-31 00:12:00)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: to_timestamp_ltz"
      }
    },
    {
      "input": {
        "query": "SELECT to_timestamp_ltz('2016-12-31', 'yyyy-MM-dd');",
        "result": [
          "2016-12-31 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_timestamp_ltz(2016-12-31, yyyy-MM-dd)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: to_timestamp_ltz"
      }
    },
    {
      "input": {
        "query": "SELECT to_timestamp_ntz('2016-12-31 00:12:00');",
        "result": [
          "2016-12-31 00:12:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_timestamp_ntz(2016-12-31 00:12:00)",
              "nullable": true,
              "type": "timestamp_ntz",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: to_timestamp_ntz"
      }
    },
    {
      "input": {
        "query": "SELECT to_timestamp_ntz('2016-12-31', 'yyyy-MM-dd');",
        "result": [
          "2016-12-31 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_timestamp_ntz(2016-12-31, yyyy-MM-dd)",
              "nullable": true,
              "type": "timestamp_ntz",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: to_timestamp_ntz"
      }
    },
    {
      "input": {
        "query": "SELECT to_unix_timestamp('2016-04-08', 'yyyy-MM-dd');",
        "result": [
          "1460098800"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_unix_timestamp(2016-04-08, yyyy-MM-dd)",
              "nullable": true,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: to_unix_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT to_utc_timestamp('2016-08-31', 'Asia/Seoul');",
        "result": [
          "2016-08-30 15:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "to_utc_timestamp(2016-08-31, Asia/Seoul)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: to_utc_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT trunc('2009-02-12', 'MM');",
        "result": [
          "2009-02-01"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "trunc(2009-02-12, MM)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "error in DataFusion: Execution error: Unsupported date_trunc granularity: mm"
      }
    },
    {
      "input": {
        "query": "SELECT trunc('2015-10-27', 'YEAR');",
        "result": [
          "2015-01-01"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "trunc(2015-10-27, YEAR)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT trunc('2019-08-04', 'quarter');",
        "result": [
          "2019-07-01"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "trunc(2019-08-04, quarter)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT trunc('2019-08-04', 'week');",
        "result": [
          "2019-07-29"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "trunc(2019-08-04, week)",
              "nullable": true,
              "type": "date",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT try_to_timestamp('2016-12-31 00:12:00');",
        "result": [
          "2016-12-31 00:12:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "try_to_timestamp(2016-12-31 00:12:00)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: try_to_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT try_to_timestamp('2016-12-31', 'yyyy-MM-dd');",
        "result": [
          "2016-12-31 00:00:00"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "try_to_timestamp(2016-12-31, yyyy-MM-dd)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: try_to_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT try_to_timestamp('foo', 'yyyy-MM-dd');",
        "result": [
          "NULL"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "try_to_timestamp(foo, yyyy-MM-dd)",
              "nullable": true,
              "type": "timestamp",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: try_to_timestamp"
      }
    },
    {
      "input": {
        "query": "SELECT unix_date(DATE(\"1970-01-02\"));",
        "result": [
          "1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "unix_date(1970-01-02)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: unix_date"
      }
    },
    {
      "input": {
        "query": "SELECT unix_micros(TIMESTAMP('1970-01-01 00:00:01Z'));",
        "result": [
          "1000000"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "unix_micros(1970-01-01 00:00:01Z)",
              "nullable": true,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: unix_micros"
      }
    },
    {
      "input": {
        "query": "SELECT unix_millis(TIMESTAMP('1970-01-01 00:00:01Z'));",
        "result": [
          "1000"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "unix_millis(1970-01-01 00:00:01Z)",
              "nullable": true,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: unix_millis"
      }
    },
    {
      "input": {
        "query": "SELECT unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z'));",
        "result": [
          "1"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "unix_seconds(1970-01-01 00:00:01Z)",
              "nullable": true,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: unix_seconds"
      }
    },
    {
      "input": {
        "query": "SELECT unix_timestamp('2016-04-08', 'yyyy-MM-dd');",
        "result": [
          "1460041200"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "unix_timestamp(2016-04-08, yyyy-MM-dd)",
              "nullable": true,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT unix_timestamp();",
        "result": [
          "1476884637"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "unix_timestamp(current_timestamp(), yyyy-MM-dd HH:mm:ss)",
              "nullable": true,
              "type": "long",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    },
    {
      "input": {
        "query": "SELECT weekday('2009-07-30');",
        "result": [
          "3"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "weekday(2009-07-30)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: weekday"
      }
    },
    {
      "input": {
        "query": "SELECT weekofyear('2008-02-20');",
        "result": [
          "8"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "weekofyear(2008-02-20)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "failure": "not implemented: function: weekofyear"
      }
    },
    {
      "input": {
        "query": "SELECT year('2016-07-30');",
        "result": [
          "2016"
        ],
        "schema": {
          "type": "struct",
          "fields": [
            {
              "name": "year(2016-07-30)",
              "nullable": true,
              "type": "integer",
              "metadata": {}
            }
          ]
        }
      },
      "output": {
        "success": "ok"
      }
    }
  ]
}
