{
  "tests": [
    {
      "input": "\nSELECT * FROM (\n  SELECT year, course, earnings FROM courseSales\n)\nPIVOT (\n  sum(earnings)\n  FOR test-test IN ('dotNET', 'Java')\n);\n        ",
      "exception": "\n[INVALID_IDENTIFIER] The unquoted identifier test-test is invalid and must be back quoted as: `test-test`.\nUnquoted identifiers can only contain ASCII letters ('a' - 'z', 'A' - 'Z'), digits ('0' - '9'), and underbar ('_').\nUnquoted identifiers must also not start with a digit.\nDifferent data sources and meta stores may impose additional restrictions on valid identifiers. SQLSTATE: 42602 (line 7, pos 10)\n\n== SQL ==\n\nSELECT * FROM (\n  SELECT year, course, earnings FROM courseSales\n)\nPIVOT (\n  sum(earnings)\n  FOR test-test IN ('dotNET', 'Java')\n----------^^^\n);\n        \n",
      "output": {
        "failure": "invalid argument: found test at 98:102 expected '('"
      }
    },
    {
      "input": "\nSELECT * FROM tab\nWINDOW window_ref AS window-ref\n        ",
      "exception": "\n[INVALID_IDENTIFIER] The unquoted identifier window-ref is invalid and must be back quoted as: `window-ref`.\nUnquoted identifiers can only contain ASCII letters ('a' - 'z', 'A' - 'Z'), digits ('0' - '9'), and underbar ('_').\nUnquoted identifiers must also not start with a digit.\nDifferent data sources and meta stores may impose additional restrictions on valid identifiers. SQLSTATE: 42602 (line 3, pos 27)\n\n== SQL ==\n\nSELECT * FROM tab\nWINDOW window_ref AS window-ref\n---------------------------^^^\n        \n",
      "output": {
        "failure": "invalid argument: found - at 46:47 expected ',', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT 'a' ! LIKE 'b'",
      "exception": "\n[SYNTAX_DISCONTINUED.BANG_EQUALS_NOT] Support of the clause or keyword: ! has been discontinued in this context. The '!' keyword is only supported as an alias for the prefix operator 'NOT'.\nUse the 'NOT' keyword instead for infix clauses such as `NOT LIKE`, `NOT IN`, `NOT BETWEEN`, etc.\nTo re-enable the '!' keyword, set \"spark.sql.legacy.bangEqualsNot\" to \"true\". SQLSTATE: 42601\n== SQL (line 1, position 12) ==\nSELECT 'a' ! LIKE 'b'\n           ^\n",
      "output": {
        "failure": "invalid argument: found ! at 11:12 expected 'AS', identifier, '(', ',', 'FROM', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT (a - test_func(b-c)) FROM test-table",
      "exception": "\n[INVALID_IDENTIFIER] The unquoted identifier test-table is invalid and must be back quoted as: `test-table`.\nUnquoted identifiers can only contain ASCII letters ('a' - 'z', 'A' - 'Z'), digits ('0' - '9'), and underbar ('_').\nUnquoted identifiers must also not start with a digit.\nDifferent data sources and meta stores may impose additional restrictions on valid identifiers. SQLSTATE: 42602 (line 1, pos 37)\n\n== SQL ==\nSELECT (a - test_func(b-c)) FROM test-table\n-------------------------------------^^^\n",
      "output": {
        "failure": "invalid argument: found - at 37:38 expected '.', '(', 'FOR', 'SYSTEM_VERSION', 'VERSION', 'SYSTEM_TIME', 'TIMESTAMP', 'TABLESAMPLE', 'PIVOT', 'UNPIVOT', 'AS', identifier, 'NATURAL', 'INNER', 'CROSS', 'OUTER', 'SEMI', 'ANTI', 'LEFT', 'RIGHT', 'FULL', 'JOIN', ',', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT * FROM table-with-hyphen",
      "exception": "\n[INVALID_IDENTIFIER] The unquoted identifier table-with-hyphen is invalid and must be back quoted as: `table-with-hyphen`.\nUnquoted identifiers can only contain ASCII letters ('a' - 'z', 'A' - 'Z'), digits ('0' - '9'), and underbar ('_').\nUnquoted identifiers must also not start with a digit.\nDifferent data sources and meta stores may impose additional restrictions on valid identifiers. SQLSTATE: 42602 (line 1, pos 19)\n\n== SQL ==\nSELECT * FROM table-with-hyphen\n-------------------^^^\n",
      "output": {
        "failure": "invalid argument: found - at 19:20 expected '.', '(', 'FOR', 'SYSTEM_VERSION', 'VERSION', 'SYSTEM_TIME', 'TIMESTAMP', 'TABLESAMPLE', 'PIVOT', 'UNPIVOT', 'AS', identifier, 'NATURAL', 'INNER', 'CROSS', 'OUTER', 'SEMI', 'ANTI', 'LEFT', 'RIGHT', 'FULL', 'JOIN', ',', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT 1 ! BETWEEN 1 AND 2",
      "exception": "\n[SYNTAX_DISCONTINUED.BANG_EQUALS_NOT] Support of the clause or keyword: ! has been discontinued in this context. The '!' keyword is only supported as an alias for the prefix operator 'NOT'.\nUse the 'NOT' keyword instead for infix clauses such as `NOT LIKE`, `NOT IN`, `NOT BETWEEN`, etc.\nTo re-enable the '!' keyword, set \"spark.sql.legacy.bangEqualsNot\" to \"true\". SQLSTATE: 42601\n== SQL (line 1, position 10) ==\nSELECT 1 ! BETWEEN 1 AND 2\n         ^\n",
      "output": {
        "failure": "invalid argument: found ! at 9:10 expected 'AS', identifier, '(', ',', 'FROM', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT 1 ! IN (2)",
      "exception": "\n[SYNTAX_DISCONTINUED.BANG_EQUALS_NOT] Support of the clause or keyword: ! has been discontinued in this context. The '!' keyword is only supported as an alias for the prefix operator 'NOT'.\nUse the 'NOT' keyword instead for infix clauses such as `NOT LIKE`, `NOT IN`, `NOT BETWEEN`, etc.\nTo re-enable the '!' keyword, set \"spark.sql.legacy.bangEqualsNot\" to \"true\". SQLSTATE: 42601\n== SQL (line 1, position 10) ==\nSELECT 1 ! IN (2)\n         ^\n",
      "output": {
        "failure": "invalid argument: found ! at 9:10 expected 'AS', identifier, '(', ',', 'FROM', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT 1 IS ! NULL",
      "exception": "\n[SYNTAX_DISCONTINUED.BANG_EQUALS_NOT] Support of the clause or keyword: ! has been discontinued in this context. The '!' keyword is only supported as an alias for the prefix operator 'NOT'.\nUse the 'NOT' keyword instead for infix clauses such as `NOT LIKE`, `NOT IN`, `NOT BETWEEN`, etc.\nTo re-enable the '!' keyword, set \"spark.sql.legacy.bangEqualsNot\" to \"true\". SQLSTATE: 42601\n== SQL (line 1, position 13) ==\nSELECT 1 IS ! NULL\n            ^\n",
      "output": {
        "failure": "invalid argument: found IS at 9:11 expected 'AS', identifier, '(', ',', 'FROM', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT a-b AS a-b FROM t",
      "exception": "\n[INVALID_IDENTIFIER] The unquoted identifier a-b is invalid and must be back quoted as: `a-b`.\nUnquoted identifiers can only contain ASCII letters ('a' - 'z', 'A' - 'Z'), digits ('0' - '9'), and underbar ('_').\nUnquoted identifiers must also not start with a digit.\nDifferent data sources and meta stores may impose additional restrictions on valid identifiers. SQLSTATE: 42602 (line 1, pos 15)\n\n== SQL ==\nSELECT a-b AS a-b FROM t\n---------------^^^\n",
      "output": {
        "failure": "invalid argument: found - at 15:16 expected ',', 'FROM', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT a-b FROM table-hyphen WHERE a-b = 0",
      "exception": "\n[INVALID_IDENTIFIER] The unquoted identifier table-hyphen is invalid and must be back quoted as: `table-hyphen`.\nUnquoted identifiers can only contain ASCII letters ('a' - 'z', 'A' - 'Z'), digits ('0' - '9'), and underbar ('_').\nUnquoted identifiers must also not start with a digit.\nDifferent data sources and meta stores may impose additional restrictions on valid identifiers. SQLSTATE: 42602 (line 1, pos 21)\n\n== SQL ==\nSELECT a-b FROM table-hyphen WHERE a-b = 0\n---------------------^^^\n",
      "output": {
        "failure": "invalid argument: found - at 21:22 expected '.', '(', 'FOR', 'SYSTEM_VERSION', 'VERSION', 'SYSTEM_TIME', 'TIMESTAMP', 'TABLESAMPLE', 'PIVOT', 'UNPIVOT', 'AS', identifier, 'NATURAL', 'INNER', 'CROSS', 'OUTER', 'SEMI', 'ANTI', 'LEFT', 'RIGHT', 'FULL', 'JOIN', ',', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT a-b FROM table-with-hyphen",
      "exception": "\n[INVALID_IDENTIFIER] The unquoted identifier table-with-hyphen is invalid and must be back quoted as: `table-with-hyphen`.\nUnquoted identifiers can only contain ASCII letters ('a' - 'z', 'A' - 'Z'), digits ('0' - '9'), and underbar ('_').\nUnquoted identifiers must also not start with a digit.\nDifferent data sources and meta stores may impose additional restrictions on valid identifiers. SQLSTATE: 42602 (line 1, pos 21)\n\n== SQL ==\nSELECT a-b FROM table-with-hyphen\n---------------------^^^\n",
      "output": {
        "failure": "invalid argument: found - at 21:22 expected '.', '(', 'FOR', 'SYSTEM_VERSION', 'VERSION', 'SYSTEM_TIME', 'TIMESTAMP', 'TABLESAMPLE', 'PIVOT', 'UNPIVOT', 'AS', identifier, 'NATURAL', 'INNER', 'CROSS', 'OUTER', 'SEMI', 'ANTI', 'LEFT', 'RIGHT', 'FULL', 'JOIN', ',', 'LATERAL', 'WHERE', 'GROUP', 'HAVING', 'INTERSECT', 'UNION', 'EXCEPT', 'MINUS', 'WINDOW', 'ORDER', 'SORT', 'CLUSTER', 'DISTRIBUTE', 'LIMIT', 'OFFSET', ';', or end of input"
      }
    },
    {
      "input": "SELECT cast('a' as CHAR)",
      "exception": "\n[DATATYPE_MISSING_SIZE] DataType \"CHAR\" requires a length parameter, for example \"CHAR\"(10). Please specify the length. SQLSTATE: 42K01\n== SQL (line 1, position 20) ==\nSELECT cast('a' as CHAR)\n                   ^^^^\n",
      "output": {
        "failure": "invalid argument: missing character length"
      }
    },
    {
      "input": "SELECT cast('a' as Character)",
      "exception": "\n[DATATYPE_MISSING_SIZE] DataType \"CHARACTER\" requires a length parameter, for example \"CHARACTER\"(10). Please specify the length. SQLSTATE: 42K01\n== SQL (line 1, position 20) ==\nSELECT cast('a' as Character)\n                   ^^^^^^^^^\n",
      "output": {
        "failure": "invalid argument: missing character length"
      }
    },
    {
      "input": "SELECT cast('a' as Varchar)",
      "exception": "\n[DATATYPE_MISSING_SIZE] DataType \"VARCHAR\" requires a length parameter, for example \"VARCHAR\"(10). Please specify the length. SQLSTATE: 42K01\n== SQL (line 1, position 20) ==\nSELECT cast('a' as Varchar)\n                   ^^^^^^^\n",
      "output": {
        "failure": "invalid argument: found 'a' at 12:15 expected identifier"
      }
    },
    {
      "input": "SELECT cast(1 as badtype)",
      "exception": "\n[UNSUPPORTED_DATATYPE] Unsupported data type \"BADTYPE\". SQLSTATE: 0A000\n== SQL (line 1, position 18) ==\nSELECT cast(1 as badtype)\n                 ^^^^^^^\n",
      "output": {
        "failure": "invalid argument: found as at 14:16 expected ',', or ')'"
      }
    }
  ]
}
