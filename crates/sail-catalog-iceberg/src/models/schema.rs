/*
 * Apache Iceberg REST Catalog API
 *
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use sail_iceberg::NestedFieldRef;
use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Schema {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "fields")]
    pub fields: Vec<NestedFieldRef>,
    #[serde(rename = "schema-id", skip_serializing_if = "Option::is_none")]
    pub schema_id: Option<i32>,
    #[serde(
        rename = "identifier-field-ids",
        skip_serializing_if = "Option::is_none"
    )]
    pub identifier_field_ids: Option<Vec<i32>>,
}

impl Schema {
    pub fn new(r#type: Type, fields: Vec<NestedFieldRef>) -> Schema {
        Schema {
            r#type,
            fields,
            schema_id: None,
            identifier_field_ids: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "struct")]
    Struct,
}

impl Default for Type {
    fn default() -> Type {
        Self::Struct
    }
}
