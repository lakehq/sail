# References:
#   - [1] https://spark.apache.org/docs/4.0.0/sql-data-sources-csv.html#data-source-option
#   - [2] https://github.com/apache/spark/blob/b0c2ba357bf080dd328b95e4a6402b134a641a1a/python/pyspark/sql/connect/readwriter.py#L254-L290

# TODO: Delimiter can be one or more characters
- key: delimiter
  aliases:
    - sep
  default: ","
  description: |
    Sets a single character separator for each field and value.
  supported: true
  rust_type: char
  rust_deserialize_with: crate::options::serde::deserialize_char

- key: quote
  default: "\""
  description: |
    Sets a single character used for escaping quoted values where the delimiter can be part of the value.
    For reading, if you would like to turn off quotations, you need to set not null but an empty string.
  supported: true
  rust_type: Option<char>
  rust_deserialize_with: crate::options::serde::deserialize_optional_char

- key: escape
  default: "\\"
  description: |
    Sets a single character used for escaping quotes inside an already quoted value.
  supported: true
  rust_type: Option<char>
  rust_deserialize_with: crate::options::serde::deserialize_optional_char

- key: comment
  default: ""
  description: |
    Sets a single character used for skipping lines that begin with this character. By default, it is disabled.
  supported: true
  rust_type: Option<char>
  rust_deserialize_with: crate::options::serde::deserialize_optional_char

- key: header
  default: "false"
  description: |
    For reading, uses the first line as names of columns. CSV built-in functions ignore this option.
  supported: true
  rust_type: bool
  rust_deserialize_with: crate::options::serde::deserialize_bool

- key: null_value
  aliases:
    - nullValue
  default: ""
  description: |
    Sets the string representation of a null value. Throws an exception if `null_regex` is also set.
    Defaults to treating empty values as null.
  supported: true

- key: null_regex
  aliases:
    - nullRegex
  default: ""
  description: |
    Optional regex to match null values. Throws an exception if `null_value` is also set.
    Defaults to treating empty values as null.
  supported: true

- key: line_sep
  aliases:
    - lineSep
    - terminator
  default: ""
  description: |
    Sets the single character line separator that should be used for parsing.
    CSV built-in functions ignore this option. Supports \\r, \\r\\n and \\n.
    For reading, defaults to None (CRLF: \\r, \\r\\n and \\n).
  supported: true
  rust_type: Option<char>
  rust_deserialize_with: crate::options::serde::deserialize_optional_char

- key: infer_schema
  aliases:
    - inferSchema
  default: "true"
  description: |
    Infers the input schema automatically from data. It requires one extra pass over the data.
    Ignored if the schema is specified explicitly. If False, the schema must be specified explicitly.
    CSV built-in functions ignore this option.
  supported: false

- key: schema_infer_max_records
  aliases:
    - schemaInferMaxRecords
  default: "1000"
  description: |
    The maximum number of rows to read from CSV files for schema inference if needed.
  supported: true
  rust_type: usize
  rust_deserialize_with: crate::options::serde::deserialize_usize

- key: multi_line
  aliases:
    - multiLine
  default: "false"
  description: |
    Specifies whether newlines in quoted values are supported.
    Allows a row to span multiple lines, by parsing line breaks within quoted values as part of the value itself.
    Parsing newlines in quoted values may be affected by execution behavior such as parallel file scanning.
    Setting this to `true` ensures that newlines in values are parsed successfully, which may reduce performance.
  supported: true
  rust_type: bool
  rust_deserialize_with: crate::options::serde::deserialize_bool

- key: compression
  aliases:
    - codec
  default: "UNCOMPRESSED"
  description: |
    Specifies the file compression type. The following compression types are supported:
      - `GZIP` or `GZ`
      - `BZIP2` or `BZ2`
      - `XZ`
      - `ZSTD` or `ZST`
      - `UNCOMPRESSED` or ""
  supported: true

- key: encoding
  aliases:
    - charset
  default: "UTF-8"
  description: |
    For reading, decodes the CSV files by the given encoding type. CSV built-in functions ignore this option.
  supported: false

- key: prefer_date
  aliases:
    - preferDate
  default: "true"
  description: |
    During schema inference (`infer_schema`), attempts to infer string columns that contain dates as `Date` if the
    values satisfy the dateFormat option or default date format. For columns that contain a mixture of dates and
    timestamps, try inferring them as `TimestampType` if timestamp format not specified, otherwise infer them as
    `StringType`.
  supported: false

- key: enforce_schema
  aliases:
    - enforceSchema
  default: "true"
  description: |
    If it is set to true, the specified or inferred schema will be forcibly applied to datasource files, and headers in
    CSV files will be ignored. If the option is set to false, the schema will be validated against all headers in CSV
    files in the case when the header option is set to true. Field names in the schema and column names in CSV headers
    are checked by their positions taking into account the Sail configuration option `sql.case_sensitive` (to be
    implemented). Though the default value is true, it is recommended to disable the `enforce_schema` option to avoid
    incorrect results. CSV built-in functions ignore this option.
  supported: false

- key: ignore_leading_white_space
  aliases:
    - ignoreLeadingWhiteSpace
  default: "false"
  description: |
    A flag indicating whether or not leading whitespaces from values being read should be skipped.
    Defaults to false for reading.
  supported: false

- key: ignore_trailing_white_space
  aliases:
    - ignoreTrailingWhiteSpace
  default: "false"
  description: |
    A flag indicating whether or not trailing whitespaces from values being read should be skipped.
    Defaults to false for reading.
  supported: false

- key: nan_value
  aliases:
    - nanValue
  default: "NaN"
  description: |
    Sets the string representation of a non-number value.
  supported: false

- key: positive_inf
  aliases:
    - positiveInf
  default: "Inf"
  description: |
    Sets the string representation of a positive infinity value.
  supported: false

- key: negative_inf
  aliases:
    - negativeInf
  default: "-Inf"
  description: |
    Sets the string representation of a negative infinity value.
  supported: false

- key: date_format
  aliases:
    - dateFormat
  default: "yyyy-MM-dd"
  description: |
    Sets the string that indicates a date format. Custom date formats follow the formats at `Datetime` Patterns.
  supported: false

- key: timestamp_format
  aliases:
    - timestampFormat
  default: "yyyy-MM-dd'T'HH:mm:ss[.SSS][XXX]"
  description: |
    Sets the string that indicates a timestamp format. Custom date formats follow the formats at `Datetime` Patterns.
  supported: false

- key: timestamp_ntz_format
  aliases:
    - timestampNTZFormat
  default: "yyyy-MM-dd'T'HH:mm:ss[.SSS]"
  description: |
    Sets the string that indicates a timestamp without timezone format. Custom date formats follow the formats at
    `Datetime` Patterns.
  supported: false

- key: enable_date_time_parsing_fallback
  aliases:
    - enableDateTimeParsingFallback
  default: ""
  description: |
    Allows falling back to the backward compatible behavior of parsing dates and timestamps if values do not match the
    set patterns. Defaults to being enabled if the time parser policy has legacy settings or if no custom date or
    timestamp pattern was provided.
  supported: false

- key: max_columns
  aliases:
    - maxColumns
  default: "20480"
  description: |
    Defines a hard limit of how many columns a record can have.
  supported: false

- key: max_chars_per_column
  aliases:
    - maxCharsPerColumn
  default: "-1"
  description: |
    Defines the maximum number of characters allowed for any given value being read. By default, it is -1 meaning
    unlimited length.
  supported: false

- key: mode
  default: "PERMISSIVE"
  description: |
    Allows a mode for dealing with corrupt records during parsing. It supports the following case-insensitive modes.
      - `PERMISSIVE`: When it meets a corrupted record, puts the malformed string into a field configured by
        `column_name_of_corrupt_record`, and sets malformed fields to null.
      - `DROPMALFORMED`: Ignores the whole corrupted records. This mode is unsupported in the CSV built-in functions.
      - `FAILFAST`: Throws an exception when it meets corrupted records.
  supported: false

- key: column_name_of_corrupt_record
  aliases:
    - columnNameOfCorruptRecord
  default: ""
  description: |
    Allows renaming the new field having malformed string created by `PERMISSIVE` mode.
    Defaults to the Sail configuration option `sql.column_name_of_corrupt_record` (to be implemented).
  supported: false

- key: char_to_escape_quote_escaping
  aliases:
    - charToEscapeQuoteEscaping
  default: ""
  description: |
    Sets a single character used for escaping the escape for the quote character.
    The default value is escape character when escape and quote characters are different, \\0 otherwise.
  supported: false

- key: sampling_ratio
  aliases:
    - samplingRatio
  default: "1.0"
  description: |
    Defines fraction of rows used for schema inferring. CSV built-in functions ignore this option.
  supported: false

- key: empty_value
  aliases:
    - emptyValue
  default: ""
  description: |
    Sets the string representation of an empty value.
  supported: false

- key: locale
  default: "en-US"
  description: |
    Sets a locale as language tag in IETF BCP 47 format. For instance, this is used while parsing dates and timestamps.
  supported: false

- key: unescaped_quote_handling
  aliases:
    - unescapedQuoteHandling
  default: "STOP_AT_DELIMITER"
  description: |
    Defines how the CSV Parser will handle values with unescaped quotes.
      - `STOP_AT_CLOSING_QUOTE`: If unescaped quotes are found in the input, accumulate the quote character and proceed
        parsing the value as a quoted value, until a closing quote is found.
      - `BACK_TO_DELIMITER`: If unescaped quotes are found in the input, consider the value as an unquoted value.
        This will make the parser accumulate all characters of the current parsed value until the delimiter is found.
      - `STOP_AT_DELIMITER`: If unescaped quotes are found in the input, consider the value as an unquoted value.
        This will make the parser accumulate all characters until the delimiter or a line ending is found in the input. 
      - `SKIP_VALUE`: If unescaped quotes are found in the input, the content parsed for the given value will be 
        skipped and the value set in nullValue will be produced instead.
      - `RAISE_ERROR`: If unescaped quotes are found in the input, a `TextParsingException` will be thrown.
  supported: false

- key: time_zone
  aliases:
    - timeZone
  default: ""
  description: |
    Sets the string that indicates a time zone ID to be used to format timestamps in the CSV data sources or
    partition values. The following formats of timeZone are supported:
      - Region-based zone ID: It should have the form 'area/city', such as 'America/Los_Angeles'.
      - Zone offset: It should be in the format '(+|-)HH:mm', for example '-08:00' or '+01:00'.
        Also 'UTC' and 'Z' are supported as aliases of '+00:00'.
    Other short names like 'CST' are not recommended to use because they can be ambiguous.
    Defaults to the Sail configuration option `session.time_zone` (to be implemented).
  supported: false
