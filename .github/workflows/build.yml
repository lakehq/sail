name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types:
      - labeled
      - opened
      - reopened
      - synchronize

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      build_package: ${{ github.event_name == 'push' || steps.filter.outputs.package == 'true' || steps.baseline-workflow.outputs.workflow_run_id == '' }}
      baseline_run_id: ${{ steps.baseline-workflow.outputs.workflow_run_id }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            package:
              - ".github/**"
              - "crates/**"
              - "python/**"
              - "scripts/**"
              - "Cargo.lock"
              - "Cargo.toml"
              - "clippy.toml"
              - "pyproject.toml"
              - "rustfmt.toml"

      - uses: ./.github/actions/commit-baseline
        id: baseline

      - uses: ./.github/actions/commit-workflow
        id: baseline-workflow
        with:
          sha: ${{ steps.baseline.outputs.sha }}
          workflow_name: Build
          artifact_name: python-package

  build:
    name: Build
    if: ${{ needs.setup.outputs.build_package == 'true' }}
    runs-on: ubuntu-latest
    needs:
      - setup
    env:
      # Coverage environment variables
      RUSTC_WORKSPACE_WRAPPER: ${{ github.workspace }}/.github/scripts/rustc-workspace-wrapper.sh
      LLVM_PROFILE_FILE: ${{ github.workspace }}/target/sail-%p-%m.profraw
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/adjust-swap-space

      - uses: ./.github/actions/mount-target-directory

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: ./.github/actions/setup-rust

      - name: Run Format Check
        run: cargo +nightly fmt -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Cargo Test
        run: cargo test

      # Generate coverage report after tests
      - name: Generate coverage report
        run: grcov target --binary-path target/debug/ -s . -t lcov --branch --ignore-not-existing -o coverage-build.info

      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"

      - name: Upload cargo coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: cargo
          fail_ci_if_error: true
          env_vars: OS,RUST
          files: "coverage-build.info"

      - name: Build Python Package
        uses: PyO3/maturin-action@v1

      - name: Upload Python Package
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: target/wheels
          retention-days: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 30 || 1 }}

  spark-tests:
    name: Spark Tests
    if: ${{ needs.setup.outputs.build_package == 'true' }}
    uses: ./.github/workflows/spark-tests.yml
    strategy:
      matrix:
        spark-version: ["3.5.5", "4.0.0"]
    with:
      spark_version: ${{ matrix.spark-version }}
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    needs:
      - setup
      - build

  python-build:
    name: Python Build
    if: ${{ needs.setup.outputs.build_package == 'true' }}
    uses: ./.github/workflows/python-build.yml
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    needs:
      - setup
      - build

  docs-build:
    name: Docs Build
    # We must specify an explicit condition so that the job still runs when the build is skipped.
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/docs-build.yml
    needs:
      - setup
      - build
    strategy:
      matrix:
        stage: ${{ fromJSON(github.event_name == 'push' && '["dev", "prod"]' || '["test"]') }}
    with:
      stage: ${{ matrix.stage }}
      version: main
      package_run_id: ${{ needs.setup.outputs.build_package == 'true' && github.run_id || needs.setup.outputs.baseline_run_id }}

  docs-deploy:
    name: Docs Deploy
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    uses: ./.github/workflows/docs-deploy.yml
    needs:
      - docs-build
    strategy:
      max-parallel: 1
      matrix:
        stage: [dev, prod]
    permissions:
      id-token: write
    with:
      stage: ${{ matrix.stage }}
      version: main
