name: Spark tests (internal)

on:
  workflow_call:
    inputs:
      sha:
        description: The Git commit SHA to run the tests on
        type: string
        required: true
      ref:
        description: The Git reference to run the tests on
        type: string
        required: true
      name:
        description: The name of the test run
        type: string
        required: true
      spark_version:
        description: The Spark version to test
        type: string
        default: "3.5.1"

# All the scripts used in this workflow come from the commit specified by `inputs.ref`,
# which can be different from the commit that defines the workflow.
# We assume that the scripts are compatible with the workflow definition between the two commits.
# Otherwise, we may encounter errors such as "file not found" when the workflow invokes
# a script that does not exist in the commit being tested.
# Therefore, when you have both script changes and workflow changes, you should consider
# separating them into two pull requests. For example, you can add a script in one pull request
# and update the workflow to invoke the script in a follow-up pull request.

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - uses: actions/cache@v4
        name: Cache test logs
        id: cache-logs
        with:
          path: |
            tmp/spark-tests
          key: spark-tests-logs-spark-${{ inputs.spark_version }}-${{ runner.os }}-${{ runner.arch }}-${{ inputs.sha }}

      - if: steps.cache-logs.outputs.cache-hit != 'true'
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: "17"

      - if: steps.cache-logs.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - if: steps.cache-logs.outputs.cache-hit != 'true'
        name: Install Hatch
        uses: pypa/hatch@install

      - if: steps.cache-logs.outputs.cache-hit != 'true'
        name: Install grpc_health_probe
        run: |
          wget -q -O /usr/local/bin/grpc_health_probe "https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.4.26/grpc_health_probe-linux-amd64"
          chmod +x /usr/local/bin/grpc_health_probe
          grpc_health_probe -version

      # Building PySpark package is slow (~40 minutes on GitHub Linux runners),
      # so we create a dedicated cache for them to increase the cache hit rate.
      - if: steps.cache-logs.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        name: Cache PySpark package
        id: cache-pyspark
        with:
          path: |
            opt/spark/python/dist/pyspark-*.tar.gz
          # We must use `format()` to define the key here since nested variable substitution is not supported.
          key: ${{ format('spark-tests-pyspark-{0}-{1}-{2}-{3}', inputs.spark_version, runner.os, runner.arch, hashFiles(format('scripts/spark-tests/spark-{0}.patch', inputs.spark_version), 'scripts/spark-tests/build-pyspark.sh')) }}

      - if: steps.cache-logs.outputs.cache-hit != 'true' && steps.cache-pyspark.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        name: Checkout Spark
        with:
          repository: apache/spark
          path: opt/spark
          ref: v${{ inputs.spark_version }}
          fetch-depth: 1

      - if: steps.cache-logs.outputs.cache-hit != 'true' && steps.cache-pyspark.outputs.cache-hit != 'true'
        name: Build PySpark package
        run: |
          scripts/spark-tests/build-pyspark.sh

      - if: steps.cache-logs.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        name: Cache Python package
        id: cache-python-package
        with:
          path: target/wheels
          key: python-package-${{ runner.os }}-${{ runner.arch }}-${{ inputs.sha }}

      - if: steps.cache-logs.outputs.cache-hit != 'true' && steps.cache-python-package.outputs.cache-hit != 'true'
        name: Set up Rust
        uses: ./.github/actions/setup-rust

      - if: steps.cache-logs.outputs.cache-hit != 'true' && steps.cache-python-package.outputs.cache-hit != 'true'
        name: Build Python package
        uses: PyO3/maturin-action@v1

      # We do not cache the environments since package installation via `uv` is fast, while downloading
      # the environments from the cache still takes time.
      - if: steps.cache-logs.outputs.cache-hit != 'true'
        name: Set up Hatch environment
        run: |
          hatch env create test
          hatch run test:install-pyspark
          hatch run test:install-pysail

      - if: steps.cache-logs.outputs.cache-hit != 'true'
        name: Run Spark Connect server
        run: |
          nohup hatch run test:python -m pysail.spark server > /dev/null 2>&1 < /dev/null &

      - if: steps.cache-logs.outputs.cache-hit != 'true'
        name: Wait for Spark Connect server to start
        run: |
          scripts/spark-tests/wait-for-server.sh

      - if: steps.cache-logs.outputs.cache-hit != 'true'
        name: Run Spark tests
        # We set a timeout to prevent the tests from hanging indefinitely,
        # which can happen occasionally for unknown reasons.
        # The timeout value should be adjusted as we add more tests.
        timeout-minutes: 5
        env:
          TEST_RUN_GIT_COMMIT: ${{ inputs.sha }}
          TEST_RUN_GIT_REF: ${{ inputs.ref }}
        run: |
          scripts/spark-tests/run-tests.sh

      - name: Upload test logs
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ inputs.name }}
          path: tmp/spark-tests/latest
          retention-days: 7
