name: Python Build

on:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        description: Token for uploading coverage to Codecov
        required: true

jobs:
  python-build:
    name: Python Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        spark-version: ["3.5.5", "4.0.0"]
    env:
      HATCH_ENV: "test.spark-${{ matrix.spark-version }}"
      # Coverage environment variables
      RUSTC_WORKSPACE_WRAPPER: ${{ github.workspace }}/.github/scripts/rustc-workspace-wrapper.sh
      LLVM_PROFILE_FILE: ${{ github.workspace }}/target/sail-python-${{ matrix.spark-version }}-%p-%m.profraw
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Hatch
        uses: pypa/hatch@install

      - name: Install Rust toolchain and coverage tools
        run: |
          {
            rustup toolchain install stable
            rustup component add --toolchain stable llvm-tools-preview
          } &

        # Install grcov for code coverage
      - name: Install grcov
        run: |
          wget -q -O grcov.tar.bz2 "https://github.com/mozilla/grcov/releases/download/v0.10.5/grcov-x86_64-unknown-linux-gnu.tar.bz2"
          tar -xjf grcov.tar.bz2
          sudo mv grcov /usr/local/bin/
          chmod +x /usr/local/bin/grcov
          rm grcov.tar.bz2
        shell: bash

      - name: Format Check
        run: hatch fmt --check

      - name: Download Python Package
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: target/wheels

      - name: Set Up Hatch Environment
        run: |
          hatch run install-pysail

      - name: Verify Package Version
        run: |
          declared_version="$(hatch version)"
          actual_version="$(hatch run python -c 'import pysail; print(pysail.__version__)')"
          echo "Declared version: $declared_version"
          echo "Actual version: $actual_version"
          if [ "$declared_version" != "$actual_version" ]; then
            echo "The declared version does not match the actual version."
            exit 1
          fi

      - name: Run Tests
        run: hatch run pytest --pyargs pysail

      # Generate coverage report after Python tests
      - name: Generate coverage report
        run: |
          # Wait for background Rust toolchain installation to complete
          wait
          BINARY_PATH=$(hatch run python -c 'import pysail._native; import os; print(os.path.dirname(pysail._native.__file__))')
          echo "Binary path: $BINARY_PATH"
          grcov target --binary-path "$BINARY_PATH" -s . -t lcov --branch --ignore-not-existing -o coverage-python-${{ matrix.spark-version }}.info

      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"

      - name: Upload python coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: python
          fail_ci_if_error: true
          env_vars: OS,RUST
          files: "coverage-python-${{ matrix.spark-version }}.info"
