name: Release Python package

on:
  push:
    tags:
      - "v*"
      - "test/v*"
  # We can run the workflow manually to test package release without publishing to PyPI.
  workflow_dispatch:
  # FIXME: remove this
  pull_request:
    branches: [main]

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Hatch
        uses: pypa/hatch@install

      - name: Get version
        id: version
        run: |
          version="$(hatch version)"
          echo "version=${version}" >> "$GITHUB_OUTPUT"

      - name: Verify tag
        if: ${{ github.event_name == 'push' }}
        shell: bash
        run: |
          tag="${{ github.ref }}"
          version="$(hatch version)"
          if [[ "${tag}" == "refs/tags/v${version}" ]]; then
            echo "The package version ${version} will be published to PyPI."
          elif [[ "${tag}" == "refs/tags/test/v${version}" ]]; then
            echo "The package version ${version} will be published to Test PyPI."
          else
            echo "The package version ${version} and the Git tag ${tag} do not match."
            exit 1
          fi

  build-sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    needs:
      - setup
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: package-sdist
          path: dist/*.tar.gz
          retention-days: 7

  build-wheel:
    name: Build wheel
    runs-on: ${{ matrix.platform.runner }}
    needs:
      - setup
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
            os: linux
          - runner: ubuntu-latest
            target: aarch64
            os: linux
          - runner: windows-latest
            target: x64
            os: windows
          - runner: macos-12
            target: x86_64
            os: macos
          - runner: macos-14
            target: aarch64
            os: macos
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install protoc
        uses: arduino/setup-protoc@v3

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          manylinux: auto

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: package-wheel-${{ matrix.platform.os }}-${{ matrix.platform.target }}
          path: dist/*.whl
          retention-days: 7

  test-sdist:
    name: Test sdist
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
          - runner: ubuntu-24.04-arm
          - runner: macos-12
          - runner: macos-14
          - runner: windows-latest
    needs:
      - setup
      - build-sdist
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: package-sdist
          path: dist

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install protoc
        uses: arduino/setup-protoc@v3

      - name: Install package
        run: |
          pip install -vvv 'pysail[spark]==${{ needs.setup.outputs.version }}' -f dist --no-binary pysail
          pip install pytest

      - name: Verify package
        run: python -c 'import pysail; assert pysail.__version__ == "${{ needs.setup.outputs.version }}"'

      - name: Run tests
        run: pytest --pyargs pysail

  test-wheel:
    name: Test wheel
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
          - runner: ubuntu-24.04-arm
          - runner: macos-12
          - runner: macos-14
          - runner: windows-latest
    needs:
      - setup
      - build-wheel
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install package
        run: |
          pip install 'pysail[spark]==${{ needs.setup.outputs.version }}' -f dist --only-binary pysail
          pip install pytest

      - name: Verify package
        run: python -c 'import pysail; assert pysail.__version__ == "${{ needs.setup.outputs.version }}"'

      - name: Run tests
        run: pytest --pyargs pysail

  review:
    name: Review
    runs-on: ubuntu-latest
    needs:
      - test-sdist
      - test-wheel
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Show release artifacts
        run: |
          ls -lah dist
          md5sum dist/*

  release:
    name: Release
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    needs:
      - review
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_REPOSITORY: "${{ startsWith(github.ref, 'refs/tags/v') && 'pypi' || 'testpypi' }}"
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*
