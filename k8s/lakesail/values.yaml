# Default values for lakesail.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

###################################################################################
# Auto Generated Default Variables
###################################################################################

replicaCount: 1

image:
  repository: lakesail-framework
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {
#  sidecar.opentelemetry.io/inject: "true",
#  instrumentation.opentelemetry.io/inject-sdk: "true"
}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  tcpService:
      type: ClusterIP
      port: 8080
  sparkConnect:
    type: ClusterIP
    port: 50051
#  otlp:
#    type: ClusterIP
#    port: 4317
#  otlpHttp:
#    type: ClusterIP
#    port: 4318

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
#  httpGet:
#    path: /
#    port: http
  grpc:
    port: 50051
  initialDelaySeconds: 1
readinessProbe:
#  httpGet:
#    path: /
#    port: http
  grpc:
    port: 50051
  initialDelaySeconds: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


###################################################################################
# OpenTelemetry Operator
# Helm value configurations: https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-operator/values.yaml
###################################################################################
opentelemetry-operator:
  enabled: true

  manager:
    resources:
      limits:
        cpu: null
        memory: null
    extraArgs:
      - "--zap-log-level=debug"

  ## Admission webhooks make sure only requests with correctly formatted rules will get into the Operator.
  ## They also enable the sidecar injection for OpenTelemetryCollector and Instrumentation CR's
  admissionWebhooks:
    create: true
    failurePolicy: Ignore

#    pods:
#      failurePolicy: Fail

    timeoutSeconds: 30

    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values:
            - kube-system
            - kube-node-lease

    certManager:
      # To use cert-manager:
      # 1. Set enabled to true.
      # 2. Set the issuer and certificate annotations (uncomment the lines below).
      # 3. Set cert-manager.enabled to true in the cert-manager subchart of the parent chart.
      enabled: false
      # Ensure creation after the cert-manager CRDs are installed.
#      certificateAnnotations:
#        "helm.sh/hook": post-install,post-upgrade
#        "helm.sh/hook-weight": "1"
#      issuerAnnotations:
#        "helm.sh/hook": post-install,post-upgrade
#        "helm.sh/hook-weight": "1"

    autoGenerateCert:
      enabled: true
      # If set to true, new webhook key/certificate is generated on helm upgrade.
      recreate: true


# Default OpenTelemetry Collector that wll be deployed by Helm
# TODO: Refactor to have a dedicated collector config for each mode so one or more modes (or all) can be deployed.
opentelemetry-collector-spec:
  # Basic sidecar collector with debug exporter (outputs to console).
  # Good enough for our current stage, in a future TODO: we can get more fancy.
  enabled: true
  mode: deployment
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      batch:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 30

    exporters:
      debug:

    extensions:
      health_check:

    service:
      extensions: [health_check]

      telemetry:
        logs:
          level: "debug"

      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch, memory_limiter]
          exporters: [debug]
#  config: |
#    receivers:
#      otlp:
#        protocols:
#          grpc:
#            endpoint: 0.0.0.0:4317
#          http:
#            endpoint: 0.0.0.0:4318
#
#    processors:
#      batch:
#        send_batch_size: 10000
#        timeout: 10s
#      memory_limiter:
#        check_interval: 1s
#        limit_percentage: 75
#        spike_limit_percentage: 30
#      resourcedetection:
#        detectors: [env, system]
#        timeout: 2s
#        override: false
#
#    exporters:
#      otlp:
#        endpoint: "lakesail-opentelemetry-collector.default:4317"
#        tls:
#          insecure: true
#        sending_queue:
#          num_consumers: 4
#          queue_size: 100
#        retry_on_failure:
#          enabled: true
#
#    extensions:
#      health_check:
#      zpages: {}
#
#    service:
#      extensions: [health_check, zpages]
#
#      telemetry:
#        logs:
#          level: "debug"
#
#      pipelines:
#        traces:
#          receivers: [otlp]
#          processors: [batch, memory_limiter, resourcedetection]
#          exporters: [otlp]

###################################################################################
# Cert Manager
# Helm value configurations: https://artifacthub.io/packages/helm/cert-manager/cert-manager
###################################################################################
cert-manager:
  # Default is using a automatically generated self-signed certificate.
  enabled: false
  # https://cert-manager.io/docs/installation/helm/#crd-installation-advice
  installCRDs: true
  prometheus:
    enabled: false
