# Default values for lakesail.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

###################################################################################
# Auto Generated Default Variables
###################################################################################

replicaCount: 1

image:
  repository: ""
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

###################################################################################
# OpenTelemetry Operator
# Helm value configurations: https://artifacthub.io/packages/helm/cert-manager/cert-manager
###################################################################################
opentelemetry-operator:
  enabled: true

  ## Admission webhooks make sure only requests with correctly formatted rules will get into the Operator.
  ## They also enable the sidecar injection for OpenTelemetryCollector and Instrumentation CR's
  admissionWebhooks:
    ## https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-operator/README.md#tls-certificate-requirement
    ## TLS Certificate Option 1: Use certManager to generate self-signed certificate.
    ## certManager must be enabled. If enabled, always takes precendence over options 2 and 3.
    certManager:
      # Annotations for the cert and issuer if cert-manager is enabled.
      # Annotate to ensure creation after the cert-manager CRDs have been installed.
      certificateAnnotations:
        "helm.sh/hook": post-install,post-upgrade
        "helm.sh/hook-weight": "1"
      issuerAnnotations:
        "helm.sh/hook": post-install,post-upgrade
        "helm.sh/hook-weight": "1"

  # Default OpenTelemetry Collector that wll be deployed by Helm
  # TODO: Refactor to have a dedicated collector config for each mode so one or more modes (or all) can be deployed.
  collector:
    # Basic sidecar collector with debug exporter (outputs to console).
    # Good enough for our current stage, in a future TODO: we can get more fancy.
    enabled: true
    mode: sidecar
    config: |
      receivers:
        otlp:
          protocols:
            grpc:
            http:

      exporters:
        debug:

      service:
        pipelines:
          traces:
            receivers: [otlp]
            exporters: [debug]

###################################################################################
# Cert Manager
# Helm value configurations: https://artifacthub.io/packages/helm/cert-manager/cert-manager
###################################################################################

cert-manager:
  enabled: true
  # https://cert-manager.io/docs/installation/helm/#crd-installation-advice
  installCRDs: true
