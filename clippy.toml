# It is safe to make breaking changes to public members in the crates
# since we are developing an application rather than a library.
avoid-breaking-exported-api = false
too-many-arguments-threshold = 8
# FIXME: On Rust 1.87, tonic and DataFusion trigger:
#    - `result_large_err`: https://rust-lang.github.io/rust-clippy/master/index.html#result_large_err
#    - `large_enum_variant`: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant
#  https://github.com/hyperium/tonic/issues/2253
#  https://github.com/apache/datafusion/issues/16061
large-error-threshold = 264
disallowed-types = [
    { path = "datafusion_catalog::table::TableProviderFactory" },
    { path = "datafusion_datasource::file_format::FileFormatFactory" },
    { path = "datafusion_expr::logical_plan::DdlStatement" },
    { path = "datafusion_expr::logical_plan::DescribeTable" },
    { path = "datafusion_expr::logical_plan::DmlStatement" },
    { path = "datafusion_expr::logical_plan::Statement" },
]
disallowed-methods = [
    { path = "datafusion::execution::context::SessionContext::catalog" },
    { path = "datafusion::execution::context::SessionContext::catalog_names" },
    { path = "datafusion::execution::context::SessionContext::deregister_table" },
    { path = "datafusion::execution::context::SessionContext::parse_sql_expr" },
    { path = "datafusion::execution::context::SessionContext::register_arrow" },
    { path = "datafusion::execution::context::SessionContext::register_batch" },
    { path = "datafusion::execution::context::SessionContext::register_catalog" },
    { path = "datafusion::execution::context::SessionContext::register_catalog_list" },
    { path = "datafusion::execution::context::SessionContext::register_listing_table" },
    { path = "datafusion::execution::context::SessionContext::register_table" },
    { path = "datafusion::execution::context::SessionContext::sql" },
    { path = "datafusion::execution::context::SessionContext::sql_with_options" },
    { path = "datafusion::execution::context::SessionContext::table" },
    { path = "datafusion::execution::context::SessionContext::table_exist" },
    { path = "datafusion::execution::context::SessionContext::table_factory" },
    { path = "datafusion::execution::context::SessionContext::table_provider" },
    { path = "datafusion::execution::session_state::SessionState::catalog_list" },
    { path = "datafusion::execution::session_state::SessionState::create_logical_expr" },
    { path = "datafusion::execution::session_state::SessionState::create_logical_plan" },
    { path = "datafusion::execution::session_state::SessionState::expr_planners" },
    { path = "datafusion::execution::session_state::SessionState::get_file_format_factory" },
    { path = "datafusion::execution::session_state::SessionState::register_file_format" },
    { path = "datafusion::execution::session_state::SessionState::resolve_table_references" },
    { path = "datafusion::execution::session_state::SessionState::schema_for_ref" },
    { path = "datafusion::execution::session_state::SessionState::sql_to_expr" },
    { path = "datafusion::execution::session_state::SessionState::sql_to_expr_with_alias" },
    { path = "datafusion::execution::session_state::SessionState::sql_to_statement" },
    { path = "datafusion::execution::session_state::SessionState::statement_to_plan" },
    { path = "datafusion::execution::session_state::SessionState::table_factories" },
    { path = "datafusion::execution::session_state::SessionState::table_factories_mut" },
    { path = "datafusion_expr::logical_plan::LogicalPlanBuilder::insert_into" },
    { path = "datafusion_expr::logical_plan::LogicalPlanBuilder::prepare" },
]
